services:
  mysql-db-rooms:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: mydatabase
      MYSQL_TCP_PORT: 3306
    ports:
    - 3306:3306
    expose:
      - 3306
    volumes:
      - mysql-data-rooms:/var/lib/mysql
      - ./room-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s

  node-app-rooms:
    build:
      context: ./room-service
      dockerfile: Dockerfile
    environment:
      PORT: 3010
      DB_HOST: mysql-db-rooms
      DB_PORT: 3306
      DB_USER: root
      DB_NAME: mydatabase
      DB_PASSWORD: password
      MINIO_HOST: rooms-minio
      MINIO_PORT: 9000
      MINIO_USER: root
      MINIO_PASSWORD: password
    restart: always
    ports:
      - "3010:3010"
    depends_on:
      mysql-db-rooms:
        condition: service_healthy
      rooms-minio:
        condition: service_healthy
    networks:
      - mynetwork

  rooms-minio:
    image: minio/minio
    restart: always
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=root
      - MINIO_ROOT_PASSWORD=password
    volumes:
      - minio-data-rooms:/data
    ports:
      - 9000:9000
      - 9001:9001
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

#####################################################################

  mysql-db-events:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: mydatabase
      MYSQL_TCP_PORT: 3307
    ports:
    - 3307:3307
    expose:
      - 3307
    volumes:
      - mysql-data-events:/var/lib/mysql
      - ./event-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s

  node-app-events:
    build:
      context: ./event-service
      dockerfile: Dockerfile
    environment:
      PORT: 3020
      DB_HOST: mysql-db-events
      DB_PORT: 3307
      DB_USER: root
      DB_NAME: mydatabase
      DB_PASSWORD: password
      MINIO_HOST: events-minio
      MINIO_PORT: 9010
      MINIO_USER: root
      MINIO_PASSWORD: password
    restart: always
    ports:
      - "3020:3020"
    depends_on:
      mysql-db-events:
        condition: service_healthy
      events-minio:
        condition: service_healthy
    networks:
      - mynetwork

  events-minio:
    image: minio/minio
    restart: always
    command: server /data --address ":9010" --console-address ":9011"
    environment:
      - MINIO_ROOT_USER=root
      - MINIO_ROOT_PASSWORD=password
    volumes:
      - minio-data-events:/data
    ports:
      - 9010:9010
      - 9011:9011
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:9010/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

#####################################################################

  mysql-db-videos:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: mydatabase
      MYSQL_TCP_PORT: 3308
    ports:
    - 3308:3308
    expose:
      - 3308
    volumes:
      - mysql-data-videos:/var/lib/mysql
      - ./videos-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s

  node-app-videos:
    build:
      context: ./videos-service
      dockerfile: Dockerfile
    environment:
      PORT: 3030
      DB_HOST: mysql-db-videos
      DB_PORT: 3308
      DB_USER: root
      DB_NAME: mydatabase
      DB_PASSWORD: password
    restart: always
    ports:
      - "3030:3030"
    depends_on:
      mysql-db-videos:
        condition: service_healthy
    networks:
      - mynetwork

#####################################################################

  mysql-db-weather:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: mydatabase
      MYSQL_TCP_PORT: 3309
    ports:
    - 3309:3309
    expose:
      - 3309
    volumes:
      - mysql-data-weather:/var/lib/mysql
      - ./weather-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s

  node-app-weather:
    build:
      context: ./weather-service
      dockerfile: Dockerfile
    environment:
      PORT: 3040
      DB_HOST: mysql-db-weather
      DB_PORT: 3309
      DB_USER: root
      DB_NAME: mydatabase
      DB_PASSWORD: password
    restart: always
    ports:
      - "3040:3040"
    depends_on:
      mysql-db-weather:
        condition: service_healthy
    networks:
      - mynetwork

#####################################################################

  mysql-db-orders:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: mydatabase
      MYSQL_TCP_PORT: 3310
    ports:
    - 3310:3310
    expose:
      - 3310
    volumes:
      - mysql-data-orders:/var/lib/mysql
      - ./order-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s

  node-app-orders:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    environment:
      DB_HOST: mysql-db-orders
      DB_PORT: 3310
      DB_USER: root
      DB_PASSWORD: password
      DB_NAME: mydatabase
      PORT: 3050
    restart: always
    ports:
      - "3050:3050"
    depends_on:
      mysql-db-orders:
        condition: service_healthy
    networks:
      - mynetwork

#####################################################################

  node-app-gateway:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    environment:
      PORT: 3000
      ROOM_SERVICE_PORT: 3010
      EVENT_SERVICE_PORT: 3020
      VIDEOS_SERVICE_PORT: 3030
      WEATHER_SERVICE_PORT: 3040
      ORDER_SERVICE_PORT: 3050
      ROOM_SERVICE_NAME: node-app-rooms
      EVENT_SERVICE_NAME: node-app-events
      VIDEOS_SERVICE_NAME: node-app-videos
      WEATHER_SERVICE_NAME: node-app-weather
      ORDER_SERVICE_NAME: node-app-orders
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - node-app-rooms
      - node-app-events
      - node-app-videos
      - node-app-weather
      - node-app-orders
    networks:
      - mynetwork

#####################################################################

  angular-web-app:
    build:
      context: ./travel-web-app
      dockerfile: Dockerfile
    restart: always
    ports:
      - "80:80"
    depends_on:
      - node-app-gateway
    networks:
      - mynetwork

volumes:
  mysql-data-weather:
  mysql-data-videos:
  mysql-data-events:
  minio-data-events:
  mysql-data-rooms:
  minio-data-rooms:
  mysql-data-orders:

networks:
  mynetwork:
    driver: bridge
